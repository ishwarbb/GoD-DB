// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.6.1
// source: pkg/rpc/dynamo.proto

package rpc

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatusCode int32

const (
	StatusCode_OK                 StatusCode = 0
	StatusCode_ERROR              StatusCode = 1 // General server-side error
	StatusCode_NOT_FOUND          StatusCode = 2
	StatusCode_WRONG_NODE         StatusCode = 3 // Indicate the request hit the wrong node
	StatusCode_QUORUM_FAILED      StatusCode = 4 // Write quorum failed
	StatusCode_READ_QUORUM_FAILED StatusCode = 5 // Read quorum failed
	StatusCode_CONCURRENT_WRITE   StatusCode = 6 // Indicates a concurrent write was detected
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0: "OK",
		1: "ERROR",
		2: "NOT_FOUND",
		3: "WRONG_NODE",
		4: "QUORUM_FAILED",
		5: "READ_QUORUM_FAILED",
		6: "CONCURRENT_WRITE",
	}
	StatusCode_value = map[string]int32{
		"OK":                 0,
		"ERROR":              1,
		"NOT_FOUND":          2,
		"WRONG_NODE":         3,
		"QUORUM_FAILED":      4,
		"READ_QUORUM_FAILED": 5,
		"CONCURRENT_WRITE":   6,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_rpc_dynamo_proto_enumTypes[0].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_pkg_rpc_dynamo_proto_enumTypes[0]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_pkg_rpc_dynamo_proto_rawDescGZIP(), []int{0}
}

type NodeMeta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"` // e.g., hash of ip:port
	Ip            string                 `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port          int32                  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Version       int64                  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"` // Version counter for this node's state info in the ring
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeMeta) Reset() {
	*x = NodeMeta{}
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMeta) ProtoMessage() {}

func (x *NodeMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMeta.ProtoReflect.Descriptor instead.
func (*NodeMeta) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_dynamo_proto_rawDescGZIP(), []int{0}
}

func (x *NodeMeta) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeMeta) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NodeMeta) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *NodeMeta) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// VectorClock captures causality information for distributed systems
type VectorClock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Counters      map[string]uint64      `protobuf:"bytes,1,rep,name=counters,proto3" json:"counters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // node_id -> counter value
	Timestamp     *timestamp.Timestamp   `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                                          // Last update time
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VectorClock) Reset() {
	*x = VectorClock{}
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorClock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorClock) ProtoMessage() {}

func (x *VectorClock) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorClock.ProtoReflect.Descriptor instead.
func (*VectorClock) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_dynamo_proto_rawDescGZIP(), []int{1}
}

func (x *VectorClock) GetCounters() map[string]uint64 {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *VectorClock) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Placeholder requests/responses
type PingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_dynamo_proto_rawDescGZIP(), []int{2}
}

type PingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_dynamo_proto_rawDescGZIP(), []int{3}
}

func (x *PingResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"` // Add context/options later (e.g., Read preference R)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_dynamo_proto_rawDescGZIP(), []int{4}
}

func (x *GetRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// Modify GetResponse
type GetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        StatusCode             `protobuf:"varint,1,opt,name=status,proto3,enum=rpc.StatusCode" json:"status,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp     *timestamp.Timestamp   `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Keep for backward compatibility
	Coordinator   *NodeMeta              `protobuf:"bytes,4,opt,name=coordinator,proto3" json:"coordinator,omitempty"`
	CorrectNode   *NodeMeta              `protobuf:"bytes,5,opt,name=correct_node,json=correctNode,proto3" json:"correct_node,omitempty"` // If status == WRONG_NODE
	VectorClock   *VectorClock           `protobuf:"bytes,6,opt,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty"` // New field for vector clock
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_dynamo_proto_rawDescGZIP(), []int{5}
}

func (x *GetResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *GetResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *GetResponse) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *GetResponse) GetCoordinator() *NodeMeta {
	if x != nil {
		return x.Coordinator
	}
	return nil
}

func (x *GetResponse) GetCorrectNode() *NodeMeta {
	if x != nil {
		return x.CorrectNode
	}
	return nil
}

func (x *GetResponse) GetVectorClock() *VectorClock {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

type PutRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp     *timestamp.Timestamp   `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                        // Keep for backward compatibility
	VectorClock   *VectorClock           `protobuf:"bytes,4,opt,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty"` // New field for vector clock
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PutRequest) Reset() {
	*x = PutRequest{}
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRequest) ProtoMessage() {}

func (x *PutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRequest.ProtoReflect.Descriptor instead.
func (*PutRequest) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_dynamo_proto_rawDescGZIP(), []int{6}
}

func (x *PutRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PutRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PutRequest) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *PutRequest) GetVectorClock() *VectorClock {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

// Modify PutResponse
type PutResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Status           StatusCode             `protobuf:"varint,1,opt,name=status,proto3,enum=rpc.StatusCode" json:"status,omitempty"`
	Coordinator      *NodeMeta              `protobuf:"bytes,2,opt,name=coordinator,proto3" json:"coordinator,omitempty"`
	FinalTimestamp   *timestamp.Timestamp   `protobuf:"bytes,3,opt,name=final_timestamp,json=finalTimestamp,proto3" json:"final_timestamp,omitempty"`         // Keep for backward compatibility
	CorrectNode      *NodeMeta              `protobuf:"bytes,5,opt,name=correct_node,json=correctNode,proto3" json:"correct_node,omitempty"`                  // If status == WRONG_NODE
	FinalVectorClock *VectorClock           `protobuf:"bytes,6,opt,name=final_vector_clock,json=finalVectorClock,proto3" json:"final_vector_clock,omitempty"` // New field for final vector clock
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PutResponse) Reset() {
	*x = PutResponse{}
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutResponse) ProtoMessage() {}

func (x *PutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutResponse.ProtoReflect.Descriptor instead.
func (*PutResponse) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_dynamo_proto_rawDescGZIP(), []int{7}
}

func (x *PutResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *PutResponse) GetCoordinator() *NodeMeta {
	if x != nil {
		return x.Coordinator
	}
	return nil
}

func (x *PutResponse) GetFinalTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.FinalTimestamp
	}
	return nil
}

func (x *PutResponse) GetCorrectNode() *NodeMeta {
	if x != nil {
		return x.CorrectNode
	}
	return nil
}

func (x *PutResponse) GetFinalVectorClock() *VectorClock {
	if x != nil {
		return x.FinalVectorClock
	}
	return nil
}

type ReplicatePutRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp     *timestamp.Timestamp   `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                        // Keep for backward compatibility
	VectorClock   *VectorClock           `protobuf:"bytes,4,opt,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty"` // New field for vector clock
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicatePutRequest) Reset() {
	*x = ReplicatePutRequest{}
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicatePutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicatePutRequest) ProtoMessage() {}

func (x *ReplicatePutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicatePutRequest.ProtoReflect.Descriptor instead.
func (*ReplicatePutRequest) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_dynamo_proto_rawDescGZIP(), []int{8}
}

func (x *ReplicatePutRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ReplicatePutRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ReplicatePutRequest) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ReplicatePutRequest) GetVectorClock() *VectorClock {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

type ReplicatePutResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        StatusCode             `protobuf:"varint,1,opt,name=status,proto3,enum=rpc.StatusCode" json:"status,omitempty"`
	NodeId        string                 `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"` // Replica node reporting status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicatePutResponse) Reset() {
	*x = ReplicatePutResponse{}
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicatePutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicatePutResponse) ProtoMessage() {}

func (x *ReplicatePutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicatePutResponse.ProtoReflect.Descriptor instead.
func (*ReplicatePutResponse) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_dynamo_proto_rawDescGZIP(), []int{9}
}

func (x *ReplicatePutResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *ReplicatePutResponse) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type GossipRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SenderNode    *NodeMeta              `protobuf:"bytes,1,opt,name=sender_node,json=senderNode,proto3" json:"sender_node,omitempty"`                                                                           // Metadata of the node sending the gossip
	NodeStates    map[string]*NodeMeta   `protobuf:"bytes,2,rep,name=node_states,json=nodeStates,proto3" json:"node_states,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Sender's view of the cluster (NodeID -> Meta)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GossipRequest) Reset() {
	*x = GossipRequest{}
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GossipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GossipRequest) ProtoMessage() {}

func (x *GossipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GossipRequest.ProtoReflect.Descriptor instead.
func (*GossipRequest) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_dynamo_proto_rawDescGZIP(), []int{10}
}

func (x *GossipRequest) GetSenderNode() *NodeMeta {
	if x != nil {
		return x.SenderNode
	}
	return nil
}

func (x *GossipRequest) GetNodeStates() map[string]*NodeMeta {
	if x != nil {
		return x.NodeStates
	}
	return nil
}

type GossipResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UpdatedNodeStates map[string]*NodeMeta   `protobuf:"bytes,1,rep,name=updated_node_states,json=updatedNodeStates,proto3" json:"updated_node_states,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Receiver sends back newer info it has
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GossipResponse) Reset() {
	*x = GossipResponse{}
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GossipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GossipResponse) ProtoMessage() {}

func (x *GossipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GossipResponse.ProtoReflect.Descriptor instead.
func (*GossipResponse) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_dynamo_proto_rawDescGZIP(), []int{11}
}

func (x *GossipResponse) GetUpdatedNodeStates() map[string]*NodeMeta {
	if x != nil {
		return x.UpdatedNodeStates
	}
	return nil
}

type GetPreferenceListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	N             int32                  `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"` // How many nodes needed (e.g., replication factor)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPreferenceListRequest) Reset() {
	*x = GetPreferenceListRequest{}
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPreferenceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPreferenceListRequest) ProtoMessage() {}

func (x *GetPreferenceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPreferenceListRequest.ProtoReflect.Descriptor instead.
func (*GetPreferenceListRequest) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_dynamo_proto_rawDescGZIP(), []int{12}
}

func (x *GetPreferenceListRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetPreferenceListRequest) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

type GetPreferenceListResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Status         StatusCode             `protobuf:"varint,1,opt,name=status,proto3,enum=rpc.StatusCode" json:"status,omitempty"`
	PreferenceList []*NodeMeta            `protobuf:"bytes,2,rep,name=preference_list,json=preferenceList,proto3" json:"preference_list,omitempty"` // List of N nodes responsible
	Coordinator    *NodeMeta              `protobuf:"bytes,3,opt,name=coordinator,proto3" json:"coordinator,omitempty"`                             // Node that processed this request
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetPreferenceListResponse) Reset() {
	*x = GetPreferenceListResponse{}
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPreferenceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPreferenceListResponse) ProtoMessage() {}

func (x *GetPreferenceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_dynamo_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPreferenceListResponse.ProtoReflect.Descriptor instead.
func (*GetPreferenceListResponse) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_dynamo_proto_rawDescGZIP(), []int{13}
}

func (x *GetPreferenceListResponse) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *GetPreferenceListResponse) GetPreferenceList() []*NodeMeta {
	if x != nil {
		return x.PreferenceList
	}
	return nil
}

func (x *GetPreferenceListResponse) GetCoordinator() *NodeMeta {
	if x != nil {
		return x.Coordinator
	}
	return nil
}

var File_pkg_rpc_dynamo_proto protoreflect.FileDescriptor

var file_pkg_rpc_dynamo_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x70, 0x63, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a, 0x08,
	0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xc0, 0x01, 0x0a, 0x0b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x3a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x3b, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x28, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1e, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x9e, 0x02, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x0c, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xa3, 0x01, 0x0a,
	0x0a, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33, 0x0a,
	0x0c, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x22, 0x9e, 0x02, 0x0a, 0x0b, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0f,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x30, 0x0a, 0x0c, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x10, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x22, 0xac, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33, 0x0a,
	0x0c, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x22, 0x58, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50,
	0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xd2, 0x01, 0x0a,
	0x0d, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x43,
	0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x1a, 0x4c, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xc1, 0x01, 0x0a, 0x0e, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x1a, 0x53, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x6e, 0x22, 0xad, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x2a, 0x7f, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10,
	0x03, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x55, 0x4f, 0x52, 0x55, 0x4d, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x51, 0x55, 0x4f,
	0x52, 0x55, 0x4d, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45,
	0x10, 0x06, 0x32, 0xda, 0x02, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x50, 0x75, 0x74,
	0x12, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x50, 0x75, 0x74, 0x12, 0x18, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x12, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x6f, 0x73,
	0x73, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x16, 0x5a, 0x14, 0x6e, 0x6f, 0x2e, 0x63, 0x61, 0x70, 0x2f, 0x67, 0x6f, 0x64, 0x64, 0x62, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_pkg_rpc_dynamo_proto_rawDescOnce sync.Once
	file_pkg_rpc_dynamo_proto_rawDescData []byte
)

func file_pkg_rpc_dynamo_proto_rawDescGZIP() []byte {
	file_pkg_rpc_dynamo_proto_rawDescOnce.Do(func() {
		file_pkg_rpc_dynamo_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_rpc_dynamo_proto_rawDesc), len(file_pkg_rpc_dynamo_proto_rawDesc)))
	})
	return file_pkg_rpc_dynamo_proto_rawDescData
}

var file_pkg_rpc_dynamo_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_rpc_dynamo_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_pkg_rpc_dynamo_proto_goTypes = []any{
	(StatusCode)(0),                   // 0: rpc.StatusCode
	(*NodeMeta)(nil),                  // 1: rpc.NodeMeta
	(*VectorClock)(nil),               // 2: rpc.VectorClock
	(*PingRequest)(nil),               // 3: rpc.PingRequest
	(*PingResponse)(nil),              // 4: rpc.PingResponse
	(*GetRequest)(nil),                // 5: rpc.GetRequest
	(*GetResponse)(nil),               // 6: rpc.GetResponse
	(*PutRequest)(nil),                // 7: rpc.PutRequest
	(*PutResponse)(nil),               // 8: rpc.PutResponse
	(*ReplicatePutRequest)(nil),       // 9: rpc.ReplicatePutRequest
	(*ReplicatePutResponse)(nil),      // 10: rpc.ReplicatePutResponse
	(*GossipRequest)(nil),             // 11: rpc.GossipRequest
	(*GossipResponse)(nil),            // 12: rpc.GossipResponse
	(*GetPreferenceListRequest)(nil),  // 13: rpc.GetPreferenceListRequest
	(*GetPreferenceListResponse)(nil), // 14: rpc.GetPreferenceListResponse
	nil,                               // 15: rpc.VectorClock.CountersEntry
	nil,                               // 16: rpc.GossipRequest.NodeStatesEntry
	nil,                               // 17: rpc.GossipResponse.UpdatedNodeStatesEntry
	(*timestamp.Timestamp)(nil),       // 18: google.protobuf.Timestamp
}
var file_pkg_rpc_dynamo_proto_depIdxs = []int32{
	15, // 0: rpc.VectorClock.counters:type_name -> rpc.VectorClock.CountersEntry
	18, // 1: rpc.VectorClock.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 2: rpc.GetResponse.status:type_name -> rpc.StatusCode
	18, // 3: rpc.GetResponse.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 4: rpc.GetResponse.coordinator:type_name -> rpc.NodeMeta
	1,  // 5: rpc.GetResponse.correct_node:type_name -> rpc.NodeMeta
	2,  // 6: rpc.GetResponse.vector_clock:type_name -> rpc.VectorClock
	18, // 7: rpc.PutRequest.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 8: rpc.PutRequest.vector_clock:type_name -> rpc.VectorClock
	0,  // 9: rpc.PutResponse.status:type_name -> rpc.StatusCode
	1,  // 10: rpc.PutResponse.coordinator:type_name -> rpc.NodeMeta
	18, // 11: rpc.PutResponse.final_timestamp:type_name -> google.protobuf.Timestamp
	1,  // 12: rpc.PutResponse.correct_node:type_name -> rpc.NodeMeta
	2,  // 13: rpc.PutResponse.final_vector_clock:type_name -> rpc.VectorClock
	18, // 14: rpc.ReplicatePutRequest.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 15: rpc.ReplicatePutRequest.vector_clock:type_name -> rpc.VectorClock
	0,  // 16: rpc.ReplicatePutResponse.status:type_name -> rpc.StatusCode
	1,  // 17: rpc.GossipRequest.sender_node:type_name -> rpc.NodeMeta
	16, // 18: rpc.GossipRequest.node_states:type_name -> rpc.GossipRequest.NodeStatesEntry
	17, // 19: rpc.GossipResponse.updated_node_states:type_name -> rpc.GossipResponse.UpdatedNodeStatesEntry
	0,  // 20: rpc.GetPreferenceListResponse.status:type_name -> rpc.StatusCode
	1,  // 21: rpc.GetPreferenceListResponse.preference_list:type_name -> rpc.NodeMeta
	1,  // 22: rpc.GetPreferenceListResponse.coordinator:type_name -> rpc.NodeMeta
	1,  // 23: rpc.GossipRequest.NodeStatesEntry.value:type_name -> rpc.NodeMeta
	1,  // 24: rpc.GossipResponse.UpdatedNodeStatesEntry.value:type_name -> rpc.NodeMeta
	3,  // 25: rpc.NodeService.Ping:input_type -> rpc.PingRequest
	5,  // 26: rpc.NodeService.Get:input_type -> rpc.GetRequest
	7,  // 27: rpc.NodeService.Put:input_type -> rpc.PutRequest
	13, // 28: rpc.NodeService.GetPreferenceList:input_type -> rpc.GetPreferenceListRequest
	9,  // 29: rpc.NodeService.ReplicatePut:input_type -> rpc.ReplicatePutRequest
	11, // 30: rpc.NodeService.Gossip:input_type -> rpc.GossipRequest
	4,  // 31: rpc.NodeService.Ping:output_type -> rpc.PingResponse
	6,  // 32: rpc.NodeService.Get:output_type -> rpc.GetResponse
	8,  // 33: rpc.NodeService.Put:output_type -> rpc.PutResponse
	14, // 34: rpc.NodeService.GetPreferenceList:output_type -> rpc.GetPreferenceListResponse
	10, // 35: rpc.NodeService.ReplicatePut:output_type -> rpc.ReplicatePutResponse
	12, // 36: rpc.NodeService.Gossip:output_type -> rpc.GossipResponse
	31, // [31:37] is the sub-list for method output_type
	25, // [25:31] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_pkg_rpc_dynamo_proto_init() }
func file_pkg_rpc_dynamo_proto_init() {
	if File_pkg_rpc_dynamo_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_rpc_dynamo_proto_rawDesc), len(file_pkg_rpc_dynamo_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_rpc_dynamo_proto_goTypes,
		DependencyIndexes: file_pkg_rpc_dynamo_proto_depIdxs,
		EnumInfos:         file_pkg_rpc_dynamo_proto_enumTypes,
		MessageInfos:      file_pkg_rpc_dynamo_proto_msgTypes,
	}.Build()
	File_pkg_rpc_dynamo_proto = out.File
	file_pkg_rpc_dynamo_proto_goTypes = nil
	file_pkg_rpc_dynamo_proto_depIdxs = nil
}
