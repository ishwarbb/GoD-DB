syntax = "proto3";

package rpc;
option go_package = "github.com/yourusername/DynamoMiniGo/pkg/rpc"; // Adjust path
import "google/protobuf/timestamp.proto";

message NodeMeta {
    string node_id = 1; // e.g., hash of ip:port
    string ip = 2;
    int32 port = 3;
}

enum StatusCode {
    OK = 0;
    ERROR = 1;
    NOT_FOUND = 2;
    WRONG_NODE = 3; // Indicate the request hit the wrong node
    // Add more status codes as needed (e.g., QUORUM_FAILED)
  }

// Placeholder requests/responses
message PingRequest {}
message PingResponse {
    string message = 1;
}

message GetRequest {
    string key = 1;
    // Add context/options later (e.g., Read preference R)
  }

  // Modify GetResponse
  message GetResponse {
    StatusCode status = 1;
    bytes value = 2;
    google.protobuf.Timestamp timestamp = 3;
    NodeMeta coordinator = 4;
    optional NodeMeta correct_node = 5; // If status == WRONG_NODE ???
  }

  message PutRequest {
    string key = 1;
    bytes value = 2;
    google.protobuf.Timestamp timestamp = 3; // Client sets this initially
    // Add context/options later (e.g., Write preference W)
  }

  // Modify PutResponse
  message PutResponse {
    StatusCode status = 1;
    NodeMeta coordinator = 2;
    google.protobuf.Timestamp final_timestamp = 3;
    optional NodeMeta correct_node = 5; // If status == WRONG_NODE ???
  }

service NodeService {
    rpc Ping(PingRequest) returns (PingResponse);
    rpc Get(GetRequest) returns (GetResponse);
    rpc Put(PutRequest) returns (PutResponse);
    rpc GetPreferenceList(GetPreferenceListRequest) returns (GetPreferenceListResponse);
    // Add more RPCs in later iterations (Get, Put, Replicate, Gossip...)
}

// IT -3 

message GetPreferenceListRequest {
  string key = 1;
  int32 n = 2; // How many nodes needed (e.g., replication factor)
}

message GetPreferenceListResponse {
  StatusCode status = 1;
  repeated NodeMeta preference_list = 2; // List of N nodes responsible
  NodeMeta coordinator = 3; // Node that processed this request
}
